clear;
clc;

% Cargar la señal ADPCM desde el paso 3
load('comprimidas.mat', 'y_adpcm');

% Cargar frecuencia de muestreo desde el paso 1
load('archivoproyectofinal.mat', 'Fs');

% Verificar formato de señal
if size(y_adpcm, 2) > 1
    y_adpcm = mean(y_adpcm, 2); % convertir a mono
end

% Verificación rápida de duración mínima
duracion = length(y_adpcm) / Fs;
if duracion < 10
    error('La señal cargada tiene menos de 10 segundos.');
end

%% Parámetros del canal
snr_awgn = 20;  % dB
fd = 30;        % Doppler para canal Rayleigh, en Hz

% Crear objeto de canal Rayleigh
rayleighChan = comm.RayleighChannel( ...
    'SampleRate', Fs, ...
    'MaximumDopplerShift', fd, ...
    'PathDelays', 0, ...
    'AveragePathGains', 0);

% Aplicar canal Rayleigh
y_rayleigh = rayleighChan(y_adpcm);

% Agregar ruido AWGN
y_noisy = awgn(y_rayleigh, snr_awgn, 'measured');

%% Visualizar resultados
t = (0:length(y_adpcm)-1)/Fs;

figure;
subplot(3,1,1);
plot(t, y_adpcm);
title('Señal ADPCM Original');
xlabel('Tiempo (s)'); ylabel('Amplitud'); grid on;

subplot(3,1,2);
plot(t, real(y_rayleigh)); % parte real
title('Señal tras canal Rayleigh');
xlabel('Tiempo (s)'); ylabel('Amplitud'); grid on;

subplot(3,1,3);
plot(t, real(y_noisy));
title(sprintf('Señal con Rayleigh + AWGN (SNR = %d dB)', snr_awgn));
xlabel('Tiempo (s)'); ylabel('Amplitud'); grid on;

%% Guardar
save('canal_output.mat', 'y_noisy', 'Fs');
fprintf(' canal_output.mat guardado exitosamente.\n');